// index.js (phi√™n b·∫£n c√≥ menu l·ª±a ch·ªçn k·∫øt n·ªëi)
require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { initDatabase, findOrCreateUser } = require('./database.js');
const { createOAuthClient, getAuthUrl } = require('./auth.js');

initDatabase();
const token = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });
console.log('‚úÖ Bot ƒë√£ kh·ªüi ƒë·ªông v√† ƒëang l·∫Øng nghe...');

bot.on('polling_error', (error) => {
    console.log(`[L·ªói Polling]: ${error.code} - ${error.message}`);
});

const mainMenu = {
    reply_markup: {
        keyboard: [
            ['üöÄ ƒêƒÉng b√†i M·ªõi', 'üóìÔ∏è Qu·∫£n l√Ω B√†i ƒëƒÉng'],
            ['üîó Qu·∫£n l√Ω K·∫øt n·ªëi', '‚öôÔ∏è C√†i ƒë·∫∑t & Tr·ª£ gi√∫p']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
    }
};

const handleInteraction = async (msg) => {
    // Ch·ªâ x·ª≠ l√Ω tin nh·∫Øn vƒÉn b·∫£n
    if (!msg.text) return;

    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const firstName = msg.from.first_name;
    const username = msg.from.username;

    const user = findOrCreateUser(userId, firstName, username);
    console.log(`T∆∞∆°ng t√°c t·ª´ ng∆∞·ªùi d√πng: ${user.first_name} (ID: ${user.user_id})`);

    if (msg.text === '/start' || msg.text === '/menu') {
        return bot.sendMessage(chatId, `Ch√†o m·ª´ng tr·ªü l·∫°i, ${firstName}!`, mainMenu);
    }

    switch (msg.text) {
        case 'üöÄ ƒêƒÉng b√†i M·ªõi':
            bot.sendMessage(chatId, 'OK, g·ª≠i video ƒë·ªÉ ƒëƒÉng b√†i nh√©.');
            break;
        case 'üóìÔ∏è Qu·∫£n l√Ω B√†i ƒëƒÉng':
            bot.sendMessage(chatId, 'Ch·ª©c nƒÉng n√†y s·∫Ω s·ªõm ƒë∆∞·ª£c c·∫≠p nh·∫≠t.');
            break;
        case 'üîó Qu·∫£n l√Ω K·∫øt n·ªëi':
            // --- PH·∫¶N THAY ƒê·ªîI ---
            // TODO: L·∫•y tr·∫°ng th√°i k·∫øt n·ªëi t·ª´ DB ƒë·ªÉ hi·ªÉn th·ªã (v√≠ d·ª•: ‚úÖ ho·∫∑c ‚ùå)
            const connectionStatus = `Ch·ªçn n·ªÅn t·∫£ng b·∫°n mu·ªën k·∫øt n·ªëi ho·∫∑c qu·∫£n l√Ω:`;
            
            const connectionChoiceMenu = {
                reply_markup: {
                    inline_keyboard: [
                        // M·ªói n√∫t c√≥ m·ªôt 'callback_data' ri√™ng ƒë·ªÉ ch√∫ng ta bi·∫øt ng∆∞·ªùi d√πng ƒë√£ ch·ªçn g√¨
                        [{ text: 'üîµ Google (YouTube & Drive)', callback_data: 'connect_google' }],
                        [{ text: 'üìò Facebook', callback_data: 'connect_facebook' }],
                        [{ text: 'üéµ TikTok', callback_data: 'connect_tiktok' }]
                    ]
                }
            };
            bot.sendMessage(chatId, connectionStatus, connectionChoiceMenu);
            break;
        case '‚öôÔ∏è C√†i ƒë·∫∑t & Tr·ª£ gi√∫p':
            bot.sendMessage(chatId, 'Ch·ª©c nƒÉng n√†y s·∫Ω s·ªõm ƒë∆∞·ª£c c·∫≠p nh·∫≠t.');
            break;
    }
};

bot.on('message', handleInteraction);

// --- B·ªò L·∫ÆNG NGHE M·ªöI CHO C√ÅC N√öT B·∫§M N·ªòI TUY·∫æN (INLINE KEYBOARD) ---
bot.on('callback_query', async (callbackQuery) => {
    const msg = callbackQuery.message;
    const chatId = msg.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data; // D·ªØ li·ªáu t·ª´ n√∫t b·∫•m (vd: 'connect_google')

    // G·ª≠i m·ªôt ph·∫£n h·ªìi ƒë·ªÉ n√∫t b·∫•m kh√¥ng hi·ªÉn th·ªã tr·∫°ng th√°i "ƒëang t·∫£i" m√£i m√£i
    bot.answerCallbackQuery(callbackQuery.id);

    switch (data) {
        case 'connect_google':
            try {
                const oAuth2Client = await createOAuthClient();
                const authUrl = await getAuthUrl(oAuth2Client, userId);
                
                const googleConnectionMenu = {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'Nh·∫•n v√†o ƒë√¢y ƒë·ªÉ ƒêƒÉng nh·∫≠p Google', url: authUrl }]
                        ]
                    }
                };
                bot.sendMessage(chatId, 'OK, h√£y nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu k·∫øt n·ªëi v·ªõi t√†i kho·∫£n Google c·ªßa b·∫°n:', googleConnectionMenu);
            } catch (error) {
                console.error("L·ªói khi t·∫°o link k·∫øt n·ªëi Google:", error);
                bot.sendMessage(chatId, "ƒê√£ c√≥ l·ªói x·∫£y ra, kh√¥ng th·ªÉ t·∫°o link k·∫øt n·ªëi.");
            }
            break;
        case 'connect_facebook':
            bot.sendMessage(chatId, 'Ch·ª©c nƒÉng k·∫øt n·ªëi Facebook s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong th·ªùi gian t·ªõi.');
            break;
        case 'connect_tiktok':
            bot.sendMessage(chatId, 'Ch·ª©c nƒÉng k·∫øt n·ªëi TikTok s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong th·ªùi gian t·ªõi.');
            break;
    }
});
